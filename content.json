[{"title":"Android_CrashHandler","date":"2016-07-24T09:23:13.000Z","path":"2016/07/24/Android-CrashHandler/","text":"#当APP 异常崩溃时，使用Toast提示，并关闭APP，收集错误信息保存并上报 需求：由于android机型的碎片化，我们在开发时无法对所以机型进行测试，因此在可能的崩溃发生时，我们应当做一些事情来为我们提供更多信息以便改进，同时也能然崩溃发生时的用户体验得到一些改善。例如程序崩溃后的重启APP、系统dialog等并不为我们想要，因此可以在APP崩溃时进行一些处理。由于现在一些第三方提供的崩溃日志的捕获上传做得也不错，对于类似我们这些中小型公司，可以集成如腾讯的Bugly、百度的测试云平台等第三方SDK进行崩溃日志的收集及上传，在我们自定义的CrashHandler里做一些交互处理即可。如使用Toast进行崩溃提示、在崩溃时关掉APP避免重启。 ###步骤 创建CrashHandler类，继承UncaughtExceptionHandler 接口 编写崩溃处理逻辑 在自定义application中注册CrashHandler 代码块1234567891011121314151617181920212223242526272829303132333435363738394041424344public class CrashHandler implements Thread.UncaughtExceptionHandler &#123; private static CrashHandler instance = new CrashHandler(); private Context mContext; private CrashHandler() &#123;&#125; public static CrashHandler getInstance() &#123; return instance; &#125; public void setCustomCrashHanler(Context context) &#123; mContext = context; //崩溃时将catch住异常 Thread.setDefaultUncaughtExceptionHandler(this); &#125;//崩溃时触发 @Override public void uncaughtException(Thread thread, Throwable ex) &#123; //使用Toast进行提示 showToast(mContext, \"很抱歉，程序异常即将退出！\"); //延时退出 try &#123; thread.sleep(2000); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; //关闭APP Util.exic(); &#125;//线程中展示Toast private void showToast(final Context context, final String msg) &#123; new Thread(new Runnable() &#123; @Override public void run() &#123; Looper.prepare(); Toast.makeText(context, msg, Toast.LENGTH_LONG).show(); Looper.loop(); &#125; &#125;).start(); &#125;&#125; 在自定义Application的onCreate()函数中注册CrashHandle.1234567@Override public void onCreate() &#123; super.onCreate(); CrashHandler crashHandler = CrashHandler.getInstance(); crashHandler.setCustomCrashHanler(getApplicationContext()); ...... &#125; 如果是首次自定义Application，别忘了在AndroidManifest.xml中注册。123&lt;application android:name=\".MyApplication\" ...... 自定义工具类，关闭所有activity以关闭APP。1234567891011121314151617181920212223242526272829public class Util &#123; public static List&lt;Activity&gt; activityList = new LinkedList&lt;Activity&gt;(); public static void addActivity(Activity activity) &#123; activityList.add(activity); &#125; public static void removeActivity(Activity activity) &#123; if (activityList != null) &#123; boolean bResult = activityList.remove(activity); while (bResult) &#123; bResult = activityList.remove(activity); &#125; &#125; &#125; public static void exic()&#123; if (activityList.size() &gt; 0) &#123; for (Activity activitys : MyActivity.activityList) &#123; try &#123; activitys.finish(); &#125; catch (Exception e) &#123; &#125; &#125; &#125; System.exit(0); &#125;&#125; 在自定义的activity基类的onCreate()和onDestroy()中调用。 12345678910111213@Overridepublic void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); Util.addActivity(this); ......&#125;@Overrideprotected void onDestroy() &#123; removeActivity(_this); ...... super.onDestroy();&#125; 最后在程序的一处写个异常如 int i=1/0; 运行到那里进行异常测试。","tags":[{"name":"Android","slug":"Android","permalink":"http://charleswei.me/tags/Android/"}]},{"title":"Hexo的安装和使用（mac篇）","date":"2016-07-21T13:54:41.000Z","path":"2016/07/21/HowToInstallHexoForMac/","text":"前言Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。官方文档传送门。Hexo的安装是个很快速简便的过程，但依然还是有不少坑。这里记录个我的安装过程，给大家一些参考。以下是我安装时系统及软件版本，请尽量保证不低于这些版本号： OS ： OS X EI Capitan 10.11.3 XCode : 7.3 hexo : 3.2.2 node : 4.4.7 git : 2.6.4 安装安装前提需要安装 Node.js 和 Git 两个应用程序，直接到官网安装最新版本即可，如已安装请跳过。 Node.js 官网 Git 官网 安装Hexo安装完Node.js 及 Git 后，即可使用npm来安装Hexo： 1$ npm install -g hexo-cli 初始化Hexo创建一个目录用来作为你的blog目录，例如 MyBlog；并在该目录中进行Hexo的初始化： 123$ hexo init MyBlog$ cd ~/MyBlog/$ npm install 新建完成后，得到以下目录： 12345678·|-- _config.yml|-- package.json|-- scaffolds|-- source| |-- _drafts| |-- _posts|-- themes 至此，你就完成了Hexo的安装及初始化，接下来我们就可以进行本地的预览啦：先安装hexo server1$ sudo npm install hexo-server 然后生成静态页面并打开hexo本地服务12$ hexo generate (或 hexo g)$ hexo server 按命令行提示，打开 http:\\/\\/localhost:4000\\/ 即可看到默认主题的默认页面了。可能加载会很慢，因为默认主题中使用了些Google的资源，后面更换主题就会快很多了。 配置与Github账户关联首先需要去Github注册一个账号，并新建一个名为 [your_account].github.io 的仓库。然后打开前面创建的MyBlog目录下的 _config.yml 文件，在修改最下方的deploy为：*注意，冒号后面一定要加空格1234deploy: type: git repo: gihub: https://github.com/[your_account]/[your_accout].github.io.git branch: master 接下来安装hexo的git部署，在命令行中执行：1$ npm install hexo-deployer-git --save 最后，将生成静态页面并部署到github的仓库中，执行：1234$ hexo d -g 或者$ hexo generate$ hexo deploy 当提示 INFO Deploy done: git 即上传成功，这时就可以通过 http:\\/\\/[your_account].github.io 来访问你的个人站点了。这里涉及了github pages 的相关内容，有兴趣的可以去了解一下。 hexo的基本配置以下是hexo配置文件 _config.yml 的基本内容及基本设置，更多个性化设置请参考官方文档：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566# Site ##页面信息title: Who's Blog ##标题，即浏览器标签栏显示的内容subtitle: Why so serious? ##副标题description: ##描述，简介author: Charles Wei ##作者language: zh-CN ##语言timezone: Asia/Shanghai ##时区# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://wwww.charleswei.me ##域名，后面自定义域名后，写在这里，用 .github.io的话，这里用默认的不用改root: /permalink: :year/:month/:day/:title/permalink_defaults:# Directory ##文件目录，可不改source_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writing ##静态页面生成属性，可不改new_post_name: :year-:month-:day-:title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: false tab_replace: # Category &amp; Tag ##标签，可不改default_category: uncategorizedcategory_map:tag_map:# Date / Time format ##时间格式，可不改## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination ##每页显示文章数，按需改## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# Extensions ##主题设置## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: indigo# Deployment ##git部署关联## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: github: https://github.com/glassweichao/glassweichao.github.io.git branch: master 主题配置Hexo具有高定制的主题效果，你可以从Hexo的主题库中选择合适的主题，也可以自己制作。以我现在使用的indigo主题为例。首先将主题库clone到MyBlog目录下的themes目录：1git clone git@github.com:yscoder/hexo-theme-indigo.git themes/indigo 安装less，主题使用less作为css预处理工具：1npm install hexo-renderer-less --save 安装feed,用于生吃RSS：1npm install hexo-generator-feed --save 安装json-content，用于生成静态站点数据，提供搜索功能的数据源：1npm install hexo-generator-json-content --save 开启标签页：1hexo new page tags 修改12345```layout: tagsnoDate: truecomments: false--- 修改hexo配置文件12```theme: indigo 最后修改主题配置文件12 #添加新菜单项遵循以下规则 menu:link: fontawesome图标，省略前缀，本主题前缀为 icon-，必须text: About 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写url: /about 链接，绝对或相对路径，必须。target: _blank 是否跳出，省略则在当前页面打开menu: home: text: 主页 url: / archives: url: /archives tags: url: /tags github: url: https://github.com/glassweichao target: _blank link: text: 测试 url: /404rss: /atom.xml #你的头像,替换掉 indigo/source/img/logo.jpg 即可urlavatar: /img/logo.jpg Contenttags: title: 标签 #是否开启分享share: true #是否开启搜索search: true #是否大屏幕下文章页隐藏导航hideMenu: true #是否开启toc #toc: false 关闭toctoc: list_number: true # 是否显示数字排序 #浏览器标签栏小图标favicon: /favicon.ico1234最后生成部署，来看看效果吧```bashhexo cleanhexo d -g","tags":[{"name":"hexo","slug":"hexo","permalink":"http://charleswei.me/tags/hexo/"}]}]